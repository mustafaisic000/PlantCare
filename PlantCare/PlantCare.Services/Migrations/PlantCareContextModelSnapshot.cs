// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantCare.Services.Database;

#nullable disable

namespace PlantCare.Services.Migrations
{
    [DbContext(typeof(PlantCareContext))]
    partial class PlantCareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlantCare.Services.Database.Katalog", b =>
                {
                    b.Property<int>("KatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KatalogId"));

                    b.Property<DateTime>("DatumDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumOd")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KatalogId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Katalog");

                    b.HasData(
                        new
                        {
                            KatalogId = 1,
                            DatumDo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumOd = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Rose",
                            Opis = ""
                        },
                        new
                        {
                            KatalogId = 2,
                            DatumDo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumOd = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Tulip",
                            Opis = ""
                        },
                        new
                        {
                            KatalogId = 3,
                            DatumDo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumOd = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Aloe Vera",
                            Opis = ""
                        },
                        new
                        {
                            KatalogId = 4,
                            DatumDo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumOd = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Monstera Deliciosa",
                            Opis = ""
                        },
                        new
                        {
                            KatalogId = 5,
                            DatumDo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumOd = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Tomato",
                            Opis = ""
                        },
                        new
                        {
                            KatalogId = 6,
                            DatumDo = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumOd = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Basil",
                            Opis = ""
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.KatalogPost", b =>
                {
                    b.Property<int>("KatalogPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KatalogPostId"));

                    b.Property<int>("KatalogId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("KatalogPostId");

                    b.HasIndex("KatalogId");

                    b.HasIndex("PostId");

                    b.ToTable("KatalogPost");

                    b.HasData(
                        new
                        {
                            KatalogPostId = 1,
                            KatalogId = 3,
                            PostId = 1
                        },
                        new
                        {
                            KatalogPostId = 2,
                            KatalogId = 2,
                            PostId = 2
                        },
                        new
                        {
                            KatalogPostId = 3,
                            KatalogId = 6,
                            PostId = 3
                        },
                        new
                        {
                            KatalogPostId = 4,
                            KatalogId = 5,
                            PostId = 4
                        },
                        new
                        {
                            KatalogPostId = 5,
                            KatalogId = 1,
                            PostId = 5
                        },
                        new
                        {
                            KatalogPostId = 6,
                            KatalogId = 4,
                            PostId = 6
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("KategorijaId");

                    b.ToTable("Kategorije");

                    b.HasData(
                        new
                        {
                            KategorijaId = 1,
                            Naziv = "Indoor Plants"
                        },
                        new
                        {
                            KategorijaId = 2,
                            Naziv = "Outdoor Plants"
                        },
                        new
                        {
                            KategorijaId = 3,
                            Naziv = "Gardening Tips"
                        },
                        new
                        {
                            KategorijaId = 4,
                            Naziv = "Plant Care Issues"
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Komentar", b =>
                {
                    b.Property<int>("KomentarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KomentarId"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KomentarId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PostId");

                    b.ToTable("Komentari");

                    b.HasData(
                        new
                        {
                            KomentarId = 1,
                            DatumKreiranja = new DateTime(2024, 3, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            PostId = 1,
                            Sadrzaj = "I had the same issue with mine. Let the soil dry out completely before watering again and it helped."
                        },
                        new
                        {
                            KomentarId = 2,
                            DatumKreiranja = new DateTime(2024, 3, 3, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 5,
                            PostId = 1,
                            Sadrzaj = "Try watering less frequently. Succulents need much less water than other plants."
                        },
                        new
                        {
                            KomentarId = 3,
                            DatumKreiranja = new DateTime(2024, 6, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            PostId = 5,
                            Sadrzaj = "Great tips! I'll try this on my rose bushes."
                        },
                        new
                        {
                            KomentarId = 4,
                            DatumKreiranja = new DateTime(2024, 4, 11, 15, 45, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 5,
                            PostId = 2,
                            Sadrzaj = "Beautiful selection of flowers!"
                        },
                        new
                        {
                            KomentarId = 5,
                            DatumKreiranja = new DateTime(2024, 5, 6, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            PostId = 4,
                            Sadrzaj = "Have you checked the soil pH? Sometimes nutrient deficiencies can cause those spots."
                        },
                        new
                        {
                            KomentarId = 6,
                            DatumKreiranja = new DateTime(2024, 7, 2, 14, 20, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            PostId = 6,
                            Sadrzaj = "These are amazing, thanks for sharing!"
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Korisnici");

                    b.HasData(
                        new
                        {
                            KorisnikId = 1,
                            Email = "ana.admin@plantcare.com",
                            Ime = "Ana",
                            KorisnickoIme = "ana_admin",
                            LozinkaHash = "tPW/IOLa2TZIKYSA50IDeaJKYtg=",
                            LozinkaSalt = "2G2wAwYkdFgpMleomcwelg==",
                            Prezime = "Admin",
                            Status = true,
                            UlogaId = 1
                        },
                        new
                        {
                            KorisnikId = 2,
                            Email = "marko.mod@plantcare.com",
                            Ime = "Marko",
                            KorisnickoIme = "marko_mod",
                            LozinkaHash = "tPW/IOLa2TZIKYSA50IDeaJKYtg=",
                            LozinkaSalt = "2G2wAwYkdFgpMleomcwelg==",
                            Prezime = "Mod",
                            Status = true,
                            UlogaId = 2
                        },
                        new
                        {
                            KorisnikId = 3,
                            Email = "ivan.ivic@plantcare.com",
                            Ime = "Ivan",
                            KorisnickoIme = "ivan",
                            LozinkaHash = "tPW/IOLa2TZIKYSA50IDeaJKYtg=",
                            LozinkaSalt = "2G2wAwYkdFgpMleomcwelg==",
                            Prezime = "Ivić",
                            Status = true,
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 4,
                            Email = "maja.majic@plantcare.com",
                            Ime = "Maja",
                            KorisnickoIme = "majam",
                            LozinkaHash = "tPW/IOLa2TZIKYSA50IDeaJKYtg=",
                            LozinkaSalt = "2G2wAwYkdFgpMleomcwelg==",
                            Prezime = "Majić",
                            Status = true,
                            UlogaId = 3
                        },
                        new
                        {
                            KorisnikId = 5,
                            Email = "sara.saric@plantcare.com",
                            Ime = "Sara",
                            KorisnickoIme = "saras",
                            LozinkaHash = "tPW/IOLa2TZIKYSA50IDeaJKYtg=",
                            LozinkaSalt = "2G2wAwYkdFgpMleomcwelg==",
                            Prezime = "Sarić",
                            Status = true,
                            UlogaId = 3
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Lajk", b =>
                {
                    b.Property<int>("LajkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LajkId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("LajkId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PostId");

                    b.ToTable("Lajkovi");

                    b.HasData(
                        new
                        {
                            LajkId = 1,
                            Datum = new DateTime(2024, 3, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            PostId = 1
                        },
                        new
                        {
                            LajkId = 2,
                            Datum = new DateTime(2024, 3, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 5,
                            PostId = 1
                        },
                        new
                        {
                            LajkId = 3,
                            Datum = new DateTime(2024, 4, 10, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            PostId = 2
                        },
                        new
                        {
                            LajkId = 4,
                            Datum = new DateTime(2024, 5, 6, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            PostId = 5
                        },
                        new
                        {
                            LajkId = 5,
                            Datum = new DateTime(2024, 5, 6, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            PostId = 5
                        },
                        new
                        {
                            LajkId = 6,
                            Datum = new DateTime(2024, 5, 5, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 5,
                            PostId = 4
                        },
                        new
                        {
                            LajkId = 7,
                            Datum = new DateTime(2024, 7, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 2,
                            PostId = 6
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Notifikacija", b =>
                {
                    b.Property<int>("NotifikacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotifikacijaId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<bool>("Procitano")
                        .HasColumnType("bit");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotifikacijaId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PostId");

                    b.ToTable("Notifikacije");

                    b.HasData(
                        new
                        {
                            NotifikacijaId = 1,
                            Datum = new DateTime(2024, 3, 1, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            Naslov = "New Like",
                            PostId = 1,
                            Procitano = false,
                            Sadrzaj = "Maja liked your post 'Help with my succulents'."
                        },
                        new
                        {
                            NotifikacijaId = 2,
                            Datum = new DateTime(2024, 4, 11, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            Naslov = "New Comment",
                            PostId = 2,
                            Procitano = false,
                            Sadrzaj = "Sara commented on your post 'Best flowers for spring'."
                        },
                        new
                        {
                            NotifikacijaId = 3,
                            Datum = new DateTime(2024, 6, 16, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 2,
                            Naslov = "New Comment",
                            PostId = 5,
                            Procitano = false,
                            Sadrzaj = "Ivan commented on your post 'Dealing with aphids'."
                        },
                        new
                        {
                            NotifikacijaId = 4,
                            Datum = new DateTime(2024, 7, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "New Comment",
                            PostId = 6,
                            Procitano = false,
                            Sadrzaj = "Maja commented on your post 'New tropical plant varieties'."
                        },
                        new
                        {
                            NotifikacijaId = 5,
                            Datum = new DateTime(2024, 5, 6, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            Naslov = "New Comment",
                            PostId = 4,
                            Procitano = false,
                            Sadrzaj = "Ana commented on your post 'Tomato plant issues'."
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Obavijest", b =>
                {
                    b.Property<int>("ObavijestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObavijestId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ObavijestId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Obavijesti");

                    b.HasData(
                        new
                        {
                            ObavijestId = 1,
                            Datum = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Welcome to PlantCare",
                            Sadrzaj = "Hello and welcome to PlantCare! This platform is for plant lovers to share tips, ask questions, and help each other grow thriving plants."
                        },
                        new
                        {
                            ObavijestId = 2,
                            Datum = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Community Gardening Event",
                            Sadrzaj = "Join our spring gardening event on May 15th! Share your progress and tips with the community. Prizes await the best garden!"
                        },
                        new
                        {
                            ObavijestId = 3,
                            Datum = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "Scheduled Maintenance",
                            Sadrzaj = "PlantCare will undergo maintenance on June 1st at 12:00 AM UTC for about 2 hours. Thank you for your patience during this time."
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.OmiljeniPost", b =>
                {
                    b.Property<int>("OmiljeniPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OmiljeniPostId"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("OmiljeniPostId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PostId");

                    b.ToTable("OmiljeniPost");

                    b.HasData(
                        new
                        {
                            OmiljeniPostId = 1,
                            KorisnikId = 3,
                            PostId = 2
                        },
                        new
                        {
                            OmiljeniPostId = 2,
                            KorisnikId = 4,
                            PostId = 5
                        },
                        new
                        {
                            OmiljeniPostId = 3,
                            KorisnikId = 5,
                            PostId = 1
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Premium")
                        .HasColumnType("bit");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SubkategorijaId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("SubkategorijaId");

                    b.ToTable("Postovi");

                    b.HasData(
                        new
                        {
                            PostId = 1,
                            DatumKreiranja = new DateTime(2024, 3, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            Naslov = "Help with my succulents",
                            Premium = false,
                            Sadrzaj = "My succulents have soft leaves and I think I'm overwatering them. Any advice on how to help them recover?",
                            SubkategorijaId = 1
                        },
                        new
                        {
                            PostId = 2,
                            DatumKreiranja = new DateTime(2024, 4, 10, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            Naslov = "Best flowers for spring",
                            Premium = false,
                            Sadrzaj = "Looking for suggestions on the best flowers to plant this spring that are easy to maintain and bloom brightly.",
                            SubkategorijaId = 4
                        },
                        new
                        {
                            PostId = 3,
                            DatumKreiranja = new DateTime(2024, 2, 20, 8, 45, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 5,
                            Naslov = "Watering schedule for herbs",
                            Premium = false,
                            Sadrzaj = "I'm growing a variety of herbs on my balcony. How often should I water them to keep them healthy?",
                            SubkategorijaId = 7
                        },
                        new
                        {
                            PostId = 4,
                            DatumKreiranja = new DateTime(2024, 5, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 4,
                            Naslov = "Tomato plant issues",
                            Premium = false,
                            Sadrzaj = "My tomato plant's leaves are wilting and have brown spots. What could be the issue and how can I treat it?",
                            SubkategorijaId = 5
                        },
                        new
                        {
                            PostId = 5,
                            DatumKreiranja = new DateTime(2024, 6, 15, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 2,
                            Naslov = "Dealing with aphids",
                            Premium = false,
                            Sadrzaj = "I've noticed a lot of small green insects (aphids) on my rose bushes. What's the best way to get rid of them without harming the plants?",
                            SubkategorijaId = 9
                        },
                        new
                        {
                            PostId = 6,
                            DatumKreiranja = new DateTime(2024, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 1,
                            Naslov = "New tropical plant varieties",
                            Premium = true,
                            Sadrzaj = "Check out these newly available tropical plant varieties – they have unique foliage and are great for indoor growing!",
                            SubkategorijaId = 2
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int>("BrojLajkova")
                        .HasColumnType("int");

                    b.Property<int>("BrojOmiljenih")
                        .HasColumnType("int");

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("PostId");

                    b.ToTable("Reporti");

                    b.HasData(
                        new
                        {
                            ReportId = 1,
                            BrojLajkova = 0,
                            BrojOmiljenih = 0,
                            Datum = new DateTime(2024, 5, 6, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 5,
                            PostId = 4
                        },
                        new
                        {
                            ReportId = 2,
                            BrojLajkova = 0,
                            BrojOmiljenih = 0,
                            Datum = new DateTime(2024, 2, 21, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            KorisnikId = 3,
                            PostId = 3
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Subkategorija", b =>
                {
                    b.Property<int>("SubkategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubkategorijaId"));

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubkategorijaId");

                    b.HasIndex("KategorijaId");

                    b.ToTable("Subkategorije");

                    b.HasData(
                        new
                        {
                            SubkategorijaId = 1,
                            KategorijaId = 1,
                            Naziv = "Succulents"
                        },
                        new
                        {
                            SubkategorijaId = 2,
                            KategorijaId = 1,
                            Naziv = "Low-light Plants"
                        },
                        new
                        {
                            SubkategorijaId = 3,
                            KategorijaId = 1,
                            Naziv = "Flowering Houseplants"
                        },
                        new
                        {
                            SubkategorijaId = 4,
                            KategorijaId = 2,
                            Naziv = "Perennials"
                        },
                        new
                        {
                            SubkategorijaId = 5,
                            KategorijaId = 2,
                            Naziv = "Seasonal Vegetables"
                        },
                        new
                        {
                            SubkategorijaId = 6,
                            KategorijaId = 2,
                            Naziv = "Flower Beds"
                        },
                        new
                        {
                            SubkategorijaId = 7,
                            KategorijaId = 3,
                            Naziv = "Watering & Fertilizing"
                        },
                        new
                        {
                            SubkategorijaId = 8,
                            KategorijaId = 3,
                            Naziv = "Soil & Repotting"
                        },
                        new
                        {
                            SubkategorijaId = 9,
                            KategorijaId = 3,
                            Naziv = "Propagation Techniques"
                        },
                        new
                        {
                            SubkategorijaId = 10,
                            KategorijaId = 4,
                            Naziv = "Pest Control"
                        },
                        new
                        {
                            SubkategorijaId = 11,
                            KategorijaId = 4,
                            Naziv = "Yellowing Leaves"
                        },
                        new
                        {
                            SubkategorijaId = 12,
                            KategorijaId = 4,
                            Naziv = "Root Rot & Overwatering"
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Uloga", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaId");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            UlogaId = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            UlogaId = 2,
                            Naziv = "Premium User"
                        },
                        new
                        {
                            UlogaId = 3,
                            Naziv = "User"
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Uplata", b =>
                {
                    b.Property<int>("UplataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UplataId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Iznos")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("TipPretplate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UplataId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Uplate");

                    b.HasData(
                        new
                        {
                            UplataId = 1,
                            Datum = new DateTime(2024, 2, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 19.99m,
                            KorisnikId = 3,
                            TipPretplate = "Monthly"
                        },
                        new
                        {
                            UplataId = 2,
                            Datum = new DateTime(2024, 4, 10, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 9.99m,
                            KorisnikId = 5,
                            TipPretplate = "Basic"
                        },
                        new
                        {
                            UplataId = 3,
                            Datum = new DateTime(2024, 7, 22, 17, 45, 0, 0, DateTimeKind.Unspecified),
                            Iznos = 14.50m,
                            KorisnikId = 4,
                            TipPretplate = "Premium"
                        });
                });

            modelBuilder.Entity("PlantCare.Services.Database.Katalog", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("PlantCare.Services.Database.KatalogPost", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Katalog", "Katalog")
                        .WithMany("KatalogPostovi")
                        .HasForeignKey("KatalogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PlantCare.Services.Database.Post", "Post")
                        .WithMany("KatalogPostovi")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Katalog");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Komentar", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Komentari")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Services.Database.Post", "Post")
                        .WithMany("Komentari")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Korisnik", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Uloga", "Uloga")
                        .WithMany("Korisnici")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Lajk", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Lajkovi")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Services.Database.Post", "Post")
                        .WithMany("Lajkovi")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Notifikacija", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Notifikacije")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Services.Database.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("Korisnik");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Obavijest", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Obavijesti")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("PlantCare.Services.Database.OmiljeniPost", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("OmiljeniPostovi")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Services.Database.Post", "Post")
                        .WithMany("OmiljeniPostovi")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Post", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Postovi")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Services.Database.Subkategorija", "Subkategorija")
                        .WithMany()
                        .HasForeignKey("SubkategorijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Subkategorija");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Report", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Reports")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlantCare.Services.Database.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Subkategorija", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Subkategorije")
                        .HasForeignKey("KategorijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Uplata", b =>
                {
                    b.HasOne("PlantCare.Services.Database.Korisnik", "Korisnik")
                        .WithMany("Uplate")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Katalog", b =>
                {
                    b.Navigation("KatalogPostovi");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Kategorija", b =>
                {
                    b.Navigation("Subkategorije");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Korisnik", b =>
                {
                    b.Navigation("Komentari");

                    b.Navigation("Lajkovi");

                    b.Navigation("Notifikacije");

                    b.Navigation("Obavijesti");

                    b.Navigation("OmiljeniPostovi");

                    b.Navigation("Postovi");

                    b.Navigation("Reports");

                    b.Navigation("Uplate");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Post", b =>
                {
                    b.Navigation("KatalogPostovi");

                    b.Navigation("Komentari");

                    b.Navigation("Lajkovi");

                    b.Navigation("OmiljeniPostovi");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("PlantCare.Services.Database.Uloga", b =>
                {
                    b.Navigation("Korisnici");
                });
#pragma warning restore 612, 618
        }
    }
}
